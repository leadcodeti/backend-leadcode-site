name: Leadcode backend CI-CD

on:
  push:
    branches: ["main"]

jobs:
  CI:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [22.x]

    steps:
      # Checkout do c√≥digo-fonte
      - uses: actions/checkout@v4

      # Configura√ß√£o da vers√£o do Node.js
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      # Configura√ß√£o das vari√°veis de ambiente
      - name: Set up environment variables
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          TMP_BASE: ${{ secrets.TMP_BASE }}
          PORT: ${{ secrets.PORT }}
          NODE_ENV: ${{ secrets.NODE_ENV }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          LEADCODE_GMAIL_CLIENT_ID: ${{ secrets.LEADCODE_GMAIL_CLIENT_ID }}
          LEADCODE_GMAIL_CLIENT_SECRET: ${{ secrets.LEADCODE_GMAIL_CLIENT_SECRET }}
          LEADCODE_GMAIL_ACCESS_TOKEN: ${{ secrets.LEADCODE_GMAIL_ACCESS_TOKEN }}
          LEADCODE_GMAIL_REFRESH_TOKEN: ${{ secrets.LEADCODE_GMAIL_REFRESH_TOKEN }}
          LEADCODE_EMAIL: ${{ secrets.LEADCODE_EMAIL }}
          HERO_URL: ${{ secrets.HERO_URL }}
          TOP_FOOTER_LOGO_URL: ${{ secrets.TOP_FOOTER_LOGO_URL }}
          SOCIAL_MEDIA_ICON_URL: ${{ secrets.SOCIAL_MEDIA_ICON_URL }}
          PROJECT_CARD_IMAGE_URL: ${{ secrets.PROJECT_CARD_IMAGE_URL }}
          SERVICE_CARD_IMAGE_URL: ${{ secrets.SERVICE_CARD_IMAGE_URL }}
          TECH_CAROUSEL_IMAGE_URL: ${{ secrets.TECH_CAROUSEL_IMAGE_URL }}
          CLIENT_AVATAR_URL: ${{ secrets.CLIENT_AVATAR_URL }}
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "TMP_BASE=${{ secrets.TMP_BASE }}" >> .env
          echo "PORT=${{ secrets.PORT }}" >> .env
          echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_DB=${POSTGRES_DB}" >> .env
          echo "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}" >> .env
          echo "LEADCODE_GMAIL_CLIENT_ID=${LEADCODE_GMAIL_CLIENT_ID}" >> .env
          echo "LEADCODE_GMAIL_CLIENT_SECRET=${LEADCODE_GMAIL_CLIENT_SECRET}" >> .env
          echo "LEADCODE_GMAIL_ACCESS_TOKEN=${LEADCODE_GMAIL_ACCESS_TOKEN}" >> .env
          echo "LEADCODE_GMAIL_REFRESH_TOKEN=${LEADCODE_GMAIL_REFRESH_TOKEN}" >> .env
          echo "LEADCODE_EMAIL=${LEADCODE_EMAIL}" >> .env
          echo "HERO_URL=${HERO_URL}" >> .env
          echo "TOP_FOOTER_LOGO_URL=${TOP_FOOTER_LOGO_URL}" >> .env
          echo "SOCIAL_MEDIA_ICON_URL=${SOCIAL_MEDIA_ICON_URL}" >> .env
          echo "PROJECT_CARD_IMAGE_URL=${PROJECT_CARD_IMAGE_URL}" >> .env
          echo "SERVICE_CARD_IMAGE_URL=${SERVICE_CARD_IMAGE_URL}" >> .env
          echo "TECH_CAROUSEL_IMAGE_URL=${TECH_CAROUSEL_IMAGE_URL}" >> .env
          echo "CLIENT_AVATAR_URL=${CLIENT_AVATAR_URL}" >> .env

      # Instala√ß√£o das depend√™ncias do projeto
      - name: Install dependencies
        run: npm i

      # Execu√ß√£o de verifica√ß√µes de seguran√ßa
      - name: Run security checks
        run: npm audit --audit-leval=critical || true 
      
       # Verifica√ß√£o de seguran√ßa com Snyk
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

      # Constru√ß√£o do projeto
      - name: Build project
        run: npm run build

      # Constru√ß√£o e execu√ß√£o dos containers Docker
      - name: Build and run containers
        run: | 
            docker compose up -d
            echo "Aguardando o banco de dados..."
            sleep 2

      # Execu√ß√£o das migra√ß√µes do Prisma
      - name: Run Prisma Migration
        run: npx prisma migrate deploy

      # Limpeza de recursos: parada e remo√ß√£o dos containers Docker
      - name: Clean up Docker containers
        if: always()
        run: |
          docker compose down
          docker system prune -f

  CD:
    runs-on: ubuntu-latest
    needs: [CI]
    if: github.ref == 'refs/heads/main' && success()

    steps:
      # Implanta√ß√£o no servidor via SSH
      - name: Server Deploy
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            cd /home/user/app
            git pull origin main
            npm ci
            docker compose up -d
            npx prisma migrate deploy
            pm2 restart leadcode_backend_site

      # # Notifica√ß√£o no Slack em caso de sucesso
      # - name: Notify Slack on success
      #   if: success()
      #   uses: drilonrecica/action-slack-notify@0.0.3
      #   env:
      #    SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      #    SLACK_TITLE: Success Title
      #    SLACK_MESSAGE: 'Deployment successful! üöÄ'

      # # Notifica√ß√£o no Slack em caso de falha
      # - name: Notify Slack on failure
      #   if: failure()
      #   uses: drilonrecica/action-slack-notify@0.0.3
      #   env:
      #      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      #      SLACK_TITLE: Failure Title
      #      SLACK_MESSAGE: 'Deployment failed! üî¥'
